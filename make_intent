#!/usr/bin/env python

import sys
import json
import os
import shutil

def get_intent_name(f):
    with open(f) as json_file:
        data = json.load(json_file)
        return data['intent_name'], data['utterances'], data['response_sentence']

def copy_dir(path_name):
    from_dir = 'skeleton'
    to_dir = os.path.join('src', path_name).lower()
    if os.path.exists(to_dir):
        shutil.rmtree(to_dir)
    shutil.copytree(from_dir, to_dir)
    return to_dir

def create_file(path_name, utt):
    contents = (
    "export default {\n",
    "  slots: {},\n",
    "  utterances: [\n",
    "  ]\n",
    "};"
    )
    buf = []
    with open(path_name, 'w') as f:
        for line in contents:
            if 'utterances' in line:
                buf.append(line)
                for item in utt:
                    buf.append('    \"{}\"{}'.format(item, ',\n' if utt.index(item) != (len(utt)-1) else '\n'))
            else:
              buf.append(line)
        f.seek(0)
        f.writelines(buf)

def prepare_files(target_dir, intent_name, utterances, res_sentence):
    files_changed = [ 'SkeletonEntry.ts', 'SkeletonIntentHandler.ts', 'SkeletonService.ts' ]
    files_constructed = [ 'SkeletonIntent.ts' ]
    for root, dirs, files in os.walk(target_dir):
        for file in files:
            path_str = os.path.join(root, file)
            new_path_str = path_str.replace('Skeleton', intent_name)
            if file in files_changed:
                os.system("sed -i'' -e 's/Skeleton/{}/g' {}".format(intent_name, path_str))
                if file.find("Handler") > -1:
                    os.system("sed -i'' -e 's/ResponseSentence/{}/g' {}".format(res_sentence, path_str))
            elif file in files_constructed:
                create_file(path_str, utterances)
            shutil.move(path_str, new_path_str)

def modify_app(file_name, name):
    imports = []
    imports.append("import {}Intent from './{}/domain/{}Intent';\n".format(name, name.lower(), name))
    imports.append("import {}IntentHandler from './{}/handler/{}IntentHandler';\n\n".format(name, name.lower(), name))
    intent_call = "app.intent('{}Intent', {}Intent, {}IntentHandler);\n\n".format(name, name, name)
    buf = []
    with open(file_name, 'r+') as f:
        for line in f:
            if 'NEW_IMPORT_INSERTED' in line:
                for item in imports:
                    buf.append(item)
            elif 'NEW_INTENT_INSERTED' in line:
                buf.append(intent_call)
            buf.append(line)
        f.seek(0)
        f.writelines(buf)

if __name__ == '__main__':
    for root, dirs, files in os.walk("intents"):
        for file in files:
            file_name = os.path.join(root, file)
            intent_name, utterances, res_sentence = get_intent_name(file_name)
            if not os.path.exists(os.path.join("src", intent_name.lower())):
                target_dir = copy_dir(intent_name)
                prepare_files(target_dir, intent_name, utterances, res_sentence)
                modify_app(os.path.join("src", "app.ts"), intent_name)
                print "Intent and handler for {} created".format(intent_name)
            else:
                print "{} already exists, only intent updated".format(intent_name)
                intent_path = os.path.join('src', intent_name.lower(), 'domain', '{}Intent.ts'.format(intent_name))
                create_file(intent_path, utterances)
                # src_handler = os.path.join('skeleton', 'handler', 'SkeletonIntentHandler.ts')
                # dst_handler = os.path.join('src', intent_name.lower(), 'handler', '{}IntentHandler.ts'.format(intent_name))
                # shutil.copyfile(src_handler, dst_handler)
                # os.system("sed -i'' -e 's/Skeleton/{}/g' {}".format(intent_name, dst_handler))
                # os.system("sed -i'' -e 's/ResponseSentence/{}/g' {}".format(res_sentence, dst_handler))
